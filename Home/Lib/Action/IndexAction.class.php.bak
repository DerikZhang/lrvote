<?php







class IndexAction extends Action {

	// 框架首页

	public function index() {

		if($this->_param('token') && $this->_param('token')){
			$_SESSION['token'] = $this->_param('token');
			$_SESSION['wecha_id'] = $this->_param('wecha_id');
		}


		$time = time();

		$model = M ( "Vote"); 

		$vo = $model->where ("id = ". $this->_param('id') ." and status=1 and statdate<".$time." and enddate>".$time  )->find();

		

		if(!$vo){

			$this->error('投票不存在，或者过期！');

			exit();

		}


		//member expried
		$member = M("Member")->where('m_id='.$vo['mid'])->find();
		$m_start = strtotime($member['m_startdate']);
		$m_end = strtotime($member['m_enddate']);
		if($m_start > time() || $m_end < time()){
			$this->error('账号过期或未开放，请联系管理员！');
			exit();
		}
		if($member['m_status'] == 0){
			$this->error('账号已停用，请联系管理员！');
			exit();
		}
		$this->assign ( 'member', $member ); 


		if($member['m_web_auth'] == 1){
			if(empty($_GET['auth'])){ //web网页授权
				header('Location: https://open.weixin.qq.com/connect/oauth2/authorize?appid='.$member['m_appid'].'&redirect_uri='.C("site_url").'/oauth2.php&response_type=code&scope=snsapi_userinfo&state='.$this->_param('id').'A'.$member['m_id'].'#wechat_redirect');
				exit;		
			}
		}


		$vo['uptime'] = $vo['enddate'] * 1000;

		$count = M ( "Form")->where("vid=".$this->_param('id'))->count(); 

		$vo['person']  = $count;

		$vo['tickets'] = 0;

	

		$Model = new Model();

		$vo1 = $Model->query("select sum(ticket) as a  from ".C("DB_PREFIX")."form  where vid=".$this->_param('id'));

		 if($vo1){

			   $vo['tickets'] = $vo1[0]['a'];                        

		 }		





		$this->assign ( 'vo', $vo ); 



		//add click

		$Model = new Model();

		$Model->execute("update ".C("DB_PREFIX")."vote  set count=count+1 where id=".$this->_param('id'));



		//ad

		$ad = M("Ad")->where("vid=".$this->_param('id').' and display=1')->limit("0,10")->select();	

		$this->assign ( 'ad', $ad );



		$ad1 = M("Ad")->where("vid=".$this->_param('id').' and display=1')->find();

		$this->assign ( 'ad1', $ad1 );







		//列表过滤器，生成查询Map对象

				$map = array();

				$map['vid'] = array('eq',$this->_param("id"));

				$map['status'] = array('eq',1);



				//读取数据库模块列表生成菜单项

				$model = M ("Form" );



				//排序字段 默认为主键名

				if (!empty ( $_REQUEST ['_order'] )) {

					$order = $_REQUEST ['_order'];

				} else {

					$order = ! empty ( $sortBy ) ? $sortBy : $model->getPk ();

				}



				



				//排序方式默认按照倒序排列

				//接受 sost参数 0 表示倒序 非0都 表示正序

				if (isset ( $_REQUEST ['_sort'] )) {

		//			$sort = $_REQUEST ['_sort'] ? 'asc' : 'desc';

					$sort = $_REQUEST ['_sort'] == 'asc' ? 'asc' : 'desc'; //zhanghuihua@msn.com

				} else {

					$sort = $asc ? 'asc' : 'desc';

				}

				//取得满足条件的记录数

				$count = $model->where ( $map )->count ();

				if ($count > 0) {

					import ( "@.ORG.Util.Page" );

					//创建分页对象

					if (! empty ( $_REQUEST ['listRows'] )) {

						$listRows = $_REQUEST ['listRows'];

					} else {

						$listRows = '';

					}



					$listRows = C('PAGE_LISTROWS');

					$order = 'addtime';



					$p = new Page ( $count, $listRows );

					//分页查询数据

					$voList = $model->where($map)->order( "`" . $order . "` " . $sort)->limit($p->firstRow . ',' . $p->listRows)->select ( );
					
					$list = array();
					$tmp = array();
					foreach($voList as $val){
						$tmp[$val[id]] = $val[id];
						$list[] = $val;
					}
					$tmp2 = $this->_param('s');
					if(!empty($tmp2)){
						if(!array_search($tmp2,$tmp)){
							$tmp3 = M ("Form" )->where('id='.$tmp2)->find();
							$list[] = $tmp3;
						}
					}



					//echo $model->getlastsql();

					//分页跳转的时候保证查询条件

					foreach ( $map as $key => $val ) {

						if (! is_array ( $val )) {

							$p->parameter .= "$key=" . urlencode ( $val ) . "&";

						}

					}

					//分页显示

					$page = $p->show ();

					//列表排序显示

					$sortImg = $sort; //排序图标

					$sortAlt = $sort == 'desc' ? '升序排列' : '倒序排列'; //排序提示

					$sort = $sort == 'desc' ? 1 : 0; //排序方式



					//模板赋值显示

					$this->assign ( 'list', $list );

					$this->assign ( 'sort', $sort );

					$this->assign ( 'order', $order );

					$this->assign ( 'sortImg', $sortImg );

					$this->assign ( 'sortType', $sortAlt );

					$this->assign ( "page", $page );

				}





				//zhanghuihua@msn.com

				$this->assign ( 'totalCount', $count );

				$this->assign ( 'totalPages', $p->totalPages );

				$this->assign ( 'numPerPage', $p->listRows );

				$this->assign ( 'currentPage', !empty($_REQUEST[C('VAR_PAGE')])?$_REQUEST[C('VAR_PAGE')]:1);


			
				

				$this->display(); 

	}



public function search() {



		$time = time();

		$model = M ( "Vote"); 

		$vo = $model->where ("id = ". $this->_param('id') ." and status=1 and statdate<".$time." and enddate>".$time  )->find();

		

		if(!$vo){

			echo "[]";

		}



		$list = M("Form")->where("vid=".$this->_param('id')." and status=1 and username like '%".$this->_param('term')."%'")->limit("0,10")->select();	

		

		$str="";

		foreach($list as $v){

			$str.= json_encode($v['num']."号 ".$v['username']).",";

		}

		echo "[".trim($str,",")."]";





	}



	

public function search2() {



		$time = time();

		$model = M ( "Vote"); 

		$vo = $model->where ("id = ". $this->_param('id') ." and status=1 and statdate<".$time." and enddate>".$time  )->find();

		if(!$vo){

			echo "bb";

		}



		$name = $this->_param('name');

		echo iconv("GBK","UTF-8//IGNORE",$name);
	
		$name = explode(" ",$name);

		if(count($name)>1){

			$name = $name[1];

		}else{

			$name = $name[0];

		}
		
				
		$vo = M("Form")->where("vid=".$this->_param('id')." and status=1 and username like '%".$name."%'")->find();

		if($vo){

			//echo "aa";

			echo $vo['id']."|1";

		}else{

			echo "bb";

		}

	}





	public function rank() {



		$time = time();

		$model = M ( "Vote"); 

		$vo = $model->where ("id = ". $this->_param('id') ." and status=1 and statdate<".$time." and enddate>".$time  )->find();

		

		if(!$vo){

			$this->error('投票不存在，或者过期！');

			exit();

		}



		$vo['uptime'] = $vo['enddate'] * 1000;



		$count = M ( "Form")->where("vid=".$this->_param('id'))->count(); 

		$vo['person']  = $count;

		$vo['tickets'] = 0;

	

		$Model = new Model();

		$vo1 = $Model->query("select sum(ticket) as a  from ".C("DB_PREFIX")."form  where vid=".$this->_param('id'));

		 if($vo1){

			   $vo['tickets'] = $vo1[0]['a'];                        

		 }		



		$this->assign ( 'vo', $vo ); 





		$list = M("Form")->where("vid=".$this->_param('id').' and status=1')->order("ticket desc")->limit("0,20")->select();	

		$this->assign ( 'list', $list );

		



		$this->display(); 

	}







	public function pageData() {

		

				//列表过滤器，生成查询Map对象

				$map = array();

				$map['vid'] = array('eq',$this->_param("id"));

				$map['status'] = array('eq',1);


				$time = time();
				$model = M ( "Vote"); 
				$vo = $model->where ("id = ". $this->_param('id') ." and status=1 and statdate<".$time." and enddate>".$time  )->find();

				//member expried
				$member = M("Member")->where('m_id='.$vo['mid'])->find();
				$m_start = strtotime($member['m_startdate']);
				$m_end = strtotime($member['m_enddate']);
				if($m_start > time() || $m_end < time()){
					$this->error('账号过期或未开放，请联系管理员！');
					exit();
				}
				if($member['m_status'] == 0){
					$this->error('账号已停用，请联系管理员！');
					exit();
				}
				$this->assign ( 'member', $member ); 



				//读取数据库模块列表生成菜单项

				$model = M ("Form" );



				//排序字段 默认为主键名

				if (!empty ( $_REQUEST ['_order'] )) {

					$order = $_REQUEST ['_order'];

				} else {

					$order = ! empty ( $sortBy ) ? $sortBy : $model->getPk ();

				}



				



				//排序方式默认按照倒序排列

				//接受 sost参数 0 表示倒序 非0都 表示正序

				if (isset ( $_REQUEST ['_sort'] )) {

		//			$sort = $_REQUEST ['_sort'] ? 'asc' : 'desc';

					$sort = $_REQUEST ['_sort'] == 'asc' ? 'asc' : 'desc'; //zhanghuihua@msn.com

				} else {

					$sort = $asc ? 'asc' : 'desc';

				}

				//取得满足条件的记录数

				$count = $model->where ( $map )->count ();

				if ($count > 0) {

					import ( "@.ORG.Util.Page" );

					//创建分页对象

					if (! empty ( $_REQUEST ['listRows'] )) {

						$listRows = $_REQUEST ['listRows'];

					} else {

						$listRows = '';

					}



					$listRows = C('PAGE_LISTROWS');

					$order = 'addtime';



					$p = new Page ( $count, $listRows );

					//分页查询数据

					$voList = $model->where($map)->order( "`" . $order . "` " . $sort)->limit($p->firstRow . ',' . $p->listRows)->select ( );



					//echo $model->getlastsql();

					//分页跳转的时候保证查询条件

					foreach ( $map as $key => $val ) {

						if (! is_array ( $val )) {

							$p->parameter .= "$key=" . urlencode ( $val ) . "&";

						}

					}

					//分页显示

					$page = $p->show ();

					//列表排序显示

					$sortImg = $sort; //排序图标

					$sortAlt = $sort == 'desc' ? '升序排列' : '倒序排列'; //排序提示

					$sort = $sort == 'desc' ? 1 : 0; //排序方式



					//模板赋值显示

					$this->assign ( 'list', $voList );

					$this->assign ( 'sort', $sort );

					$this->assign ( 'order', $order );

					$this->assign ( 'sortImg', $sortImg );

					$this->assign ( 'sortType', $sortAlt );

					$this->assign ( "page", $page );

				}





				//zhanghuihua@msn.com

				$this->assign ( 'totalCount', $count );

				$this->assign ( 'totalPages', $p->totalPages );

				$this->assign ( 'numPerPage', $p->listRows );

				$this->assign ( 'currentPage', !empty($_REQUEST[C('VAR_PAGE')])?$_REQUEST[C('VAR_PAGE')]:1);



				$this->display(); 



	}

	







	

	public function signup() {



		$time = time();

		$model = M ( "Vote"); 

		$vo = $model->where ("id = ". $this->_param('id') ." and status=1 and statdate<".$time." and enddate>".$time  )->find();

		

		if(!$vo){

			$this->error('投票不存在，或者过期！');

			exit();

		}


		//member expried
		$member = M("Member")->where('m_id='.$vo['mid'])->find();
		$m_start = strtotime($member['m_startdate']);
		$m_end = strtotime($member['m_enddate']);
		if($m_start > time() || $m_end < time()){
			$this->error('账号过期或未开放，请联系管理员！');
			exit();
		}
		if($member['m_status'] == 0){
			$this->error('账号已停用，请联系管理员！');
			exit();
		}
		$this->assign ( 'member', $member ); 





		$tmp = M("Userinfo")->where("token='".$this->_param('token')."' and wecha_id='".$this->_param('wecha_id')."'")->find();

		if($tmp){

						

			$_SESSION['token'] = $this->_param('token');

			$_SESSION['wecha_id'] = $this->_param('wecha_id');



			$this->assign ( 'attent', $tmp ); 

		}else{

			if($member['m_isConnent'] === '0'){
				$this->assign ( 'attent', "1" ); 
			}else{
				$this->assign ( 'attent', "" ); 				
			}

		}







		$count = M ( "Form")->where("vid=".$this->_param('id'))->count(); 

		$vo['count']  = $count;  





		//ad

		$ad = M("Ad")->where("vid=".$this->_param('id').' and display=1')->limit("0,10")->select();	

		$this->assign ( 'ad', $ad );



		$this->assign ( 'vo', $vo ); 



		$ad1 = M("Ad")->where("vid=".$this->_param('id').' and display=1')->find();

		$this->assign ( 'ad1', $ad1 );



		$this->display(); 



	}	

	



	public function record() {



		if(!$this->_param('sid')){

			header('Location: /User/');

			exit;

		}



		$model = M ( "Soli");

		$soli = $model->where ( "s_id=".$this->_param('sid') )->find();

		$this->assign ( 'soli', $soli );



		$this->display ();

	}	











public function vote(){
			
		$time = time();
		$vote = M("Vote")->where ("id = ". $this->_param('id') ." and status=1 and statdate<".$time." and enddate>".$time)->field('wx_url,prevent,cknums,mid')->find();
		if(!$vote){
			$this->error('投票不存在，或者过期！');
			exit();
		}			
			

		$member = M("Member")->where('m_id='.$vote['mid'])->field('m_isConnent')->find();
		if( ($_SESSION['token'] && $_SESSION['wecha_id']) || $member['m_isConnent'] === '0' ){
			$ip = get_client_ip();

			$dd = strtotime(date("Y-m-d",time()));

			$dd2 = $dd + 86400;

			if($vote['prevent']){
				if($member['m_isConnent'] === '0'){
					$tmp =  M("Vote_record")->where('vid='.$this->_param('id').' and ip=\''.$ip.'\' and addtime >'.$dd.'  and addtime<'.$dd2)->find();
				}else{
						$tmp =  M("Vote_record")->where('vid='.$this->_param('id').' and token=\''.$_SESSION['token'].'\' and wecha_id=\''.$_SESSION['wecha_id'].'\' and addtime >'.$dd.'  and addtime<'.$dd2)->find();					
				}
				if($tmp){
					$this->error('投票失败，每天只能投一次！','__URL__/index/id/'.$this->_param('id').'.html');
				}

			}else{
				
				if($member['m_isConnent'] === '0'){
					$tmp =  M("Vote_record")->where('vid='.$this->_param('id').' and ip=\''.$ip.'\'  and addtime >'.$dd.' and addtime<'.$dd2)->count();

				}else{
					$tmp =  M("Vote_record")->where('vid='.$this->_param('id').' and token=\''.$_SESSION['token'].'\' and wecha_id=\''.$_SESSION['wecha_id'].'\' and addtime >'.$dd.' and addtime<'.$dd2)->count();

				}

				if($tmp >= $vote['cknums']){
					$this->error('投票失败，您已超过每天投票次数','__URL__/index/id/'.$this->_param('id').'.html');
				}

			}
	

			//add click

			$Model = new Model();

			$Model->execute("update ".C("DB_PREFIX")."form  set ticket=ticket+1 where id=".$this->_param('vid'));



			$record = M("Vote_record");

			$data['form_id'] = $this->_param('vid');

			$data['vid'] = $this->_param('id');

			$data['token'] = $_SESSION['token'];

			$data['wecha_id'] = $_SESSION['wecha_id'];

			$data['addtime'] = time();

			$data['ip'] = $ip;

			$data['mid'] = $vote['mid'];

			$record->add($data);



			$this->success('投票成功！','__URL__/index/id/'.$this->_param('id').'.html');

		}else{

			$this->error('请先关注微信公众号',$vote['wx_url']);

		}



}









public function insertForm(){



		$model = M ("Form");



		if(!$this->_param("username")){

			$this->error('报名失败！用户名不能为空！');

		}



		$tmp = $model->where("tel='".$this->_param("tel")."'")->find();

		if($tmp){

			$this->error('报名失败！该电话已存在！');

		}



		if(!$model->create()) {



			$this->error($model->getError());



		}else{

			$num = M("Form")->where("vid=".$this->_param("vid"))->max('num');			
			if(!empty($num)){
				$num = intval($num) + 1;
				$model->num = $num;
			}


			$model->addtime = time();

			if($result	 =	 $model->add()) {



				if($this->_param("is_ajax")){



					echo '{"message":"添加成功!","code":"1"}';



					exit;

				}



				if($this->_param("jumpUrl")){



					$jumpUrl = $this->_param("jumpUrl");



					$this->success('报名成功！',$jumpUrl);



				}else{



					$this->success('报名成功,等待审核！！');



				}







			}else{



			



				if($this->_param("is_ajax")){



					echo '{"message":"报名失败!","code":"0"}';



					exit;



				}			



			



				$this->error('报名失败！');



			}



	    }



}















//统计



public function analyse(){







	echo '{result:1,msg:"请求成功"}';



		



}



















}







?>